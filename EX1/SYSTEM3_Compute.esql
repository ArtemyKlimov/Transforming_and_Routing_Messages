

CREATE COMPUTE MODULE SYSTEM3_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.XMLNSC.msg:Message.msg:MessageHeader.hd:Security.ds:Signature.ds:Digest = TransformBase64String();
		CALL sort(OutputRoot.XMLNSC.msg:Message.msg:MessageBody.mb:ObjectBody.mb:PaymentDoc.ns1:PaymentOrderRub);
		CALL ChangeNamespaceInOutputRoot(OutputRoot.XMLNSC);
		
		RETURN TRUE;
	END;
	
	
	
	CREATE PROCEDURE sort(IN parent REFERENCE)
	BEGIN		
		DECLARE tmp REFERENCE TO parent;
		DECLARE current REFERENCE TO parent;
		MOVE current FIRSTCHILD;
		DECLARE minElement REFERENCE TO current;
		DECLARE maxElement REFERENCE TO current;
		WHILE LASTMOVE(current) = TRUE DO
			MOVE minElement TO current;
			MOVE current NEXTSIBLING;
			MOVE maxElement TO current;
			WHILE FIELDNAME(maxElement) < FIELDNAME(minElement) AND LASTMOVE(maxElement)=TRUE AND  LASTMOVE(minElement) = TRUE DO				
				DETACH maxElement;
				ATTACH maxElement TO minElement AS PREVIOUSSIBLING;
				MOVE tmp TO minElement;
				MOVE minElement TO maxElement;
				MOVE maxElement TO tmp;
				MOVE maxElement PREVIOUSSIBLING;
				MOVE minElement PREVIOUSSIBLING;
			END WHILE;			
		END WHILE;
	END;
	
	
	CREATE PROCEDURE AddAttribute(IN RootElement REFERENCE, IN levelNo INTEGER)
	BEGIN
		SET RootElement.(XMLNSC.Attribute)level = levelNo;
	END;
	
	CREATE PROCEDURE ChangeRegister(IN rootElement REFERENCE) 
	BEGIN
		DECLARE transField CHAR;
		SET transField = TRANSLATE(FIELDNAME(rootElement),'aAbBcCdDeEfFgGhHiIjjkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ','AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz');
		SET rootElement NAME = transField;
	END;
	
	
	CREATE PROCEDURE DeleteSchema(IN rootNode REFERENCE) BEGIN
		SET rootNode.(XMLNSC.Element)*[1].*:schemaLocation = NULL;  --Don't know what exactly this code does
		DECLARE I1 INTEGER CARDINALITY(rootNode.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[]);
		DECLARE I2 INTEGER 1;
		WHILE I2 <= I1 DO
			SET rootNode.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[1] = NULL;
			SET I2 = I2 + 1;
		END WHILE;
	END;
	
	
	CREATE PROCEDURE RecursiveTraverse(IN rootNode REFERENCE, IN levelNo INTEGER)
	BEGIN
		CALL ChangeNamespace(rootNode);
		CALL ChangeRegister(rootNode);
		DECLARE hasMoreChildren BOOLEAN;
		DECLARE hasMoreSiblings BOOLEAN;
		MOVE rootNode FIRSTCHILD;
		SET hasMoreChildren = LASTMOVE(rootNode);
		IF hasMoreChildren = TRUE THEN
			CALL RecursiveTraverse(rootNode, levelNo+1);
		END IF;
		MOVE rootNode NEXTSIBLING;
		SET hasMoreSiblings = LASTMOVE(rootNode);
		IF hasMoreSiblings = TRUE THEN
			CALL RecursiveTraverse(rootNode, levelNo+1);
			CALL ChangeRegister(rootNode);	
		END IF;		
	END;
	
	CREATE FUNCTION ChangeNamespaceInOutputRoot(In rootNode REFERENCE)
	BEGIN
		SET rootNode.(XMLNSC.Element)*[1].*:schemaLocation = NULL;  --Don't know what exactly this code does
		DECLARE I1 INTEGER CARDINALITY(rootNode.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[]);
		DECLARE I2 INTEGER 1;
	--	DECLARE parentRef REFERENCE TO rootNode;
		WHILE I2 <= I1 DO
			SET rootNode.(XMLNSC.Element)*[1].(XMLNSC.NamespaceDecl)*[1] = NULL;
			SET I2 = I2 + 1;
		END WHILE;
		
		DECLARE CHECKSIBLING BOOLEAN FALSE;
		DECLARE DEPTH INTEGER 0;
		
		WHILE DEPTH >= 0 DO 
			IF CHECKSIBLING = FALSE THEN
				MOVE rootNode FirstChild;			
			 	IF LASTMOVE(rootNode) = TRUE THEN
					SET DEPTH = DEPTH + 1;		
					CALL ChangeNamespace(rootNode);
					CALL ChangeRegister(rootNode);					
			 	ELSE
			 		CALL AddAttribute(rootNode, DEPTH);
			 		MOVE rootNode NEXTSIBLING;
				 	IF LASTMOVE(rootNode) = TRUE THEN
						CALL ChangeNamespace(rootNode);
						CALL ChangeRegister(rootNode);
						SET CHECKSIBLING = FALSE;
				 	ELSE
						SET DEPTH = DEPTH - 1;
						Move rootNode PARENT;
						CALL AddAttribute(rootNode, DEPTH);		 		
						SET CHECKSIBLING = TRUE;
					END IF;
			 	END IF;	
			ELSE
				MOVE rootNode NEXTSIBLING;
			 	IF LASTMOVE(rootNode) = TRUE THEN
					CALL ChangeNamespace(rootNode);
					CALL ChangeRegister(rootNode);
					SET CHECKSIBLING = FALSE;
			 	ELSE
					SET DEPTH = DEPTH - 1;
					Move rootNode PARENT;
					IF DEPTH >0 THEN
						CALL AddAttribute(rootNode, DEPTH);
					END IF;			 		
					SET CHECKSIBLING = TRUE;
				END IF;
			END IF;
		END WHILE;
	END;
		
		
	CREATE FUNCTION ChangeNamespace(IN rootNode REFERENCE)
	BEGIN
		SET rootNode.(XMLNSC.NamespaceDecl)* = NULL;
		SET rootNode NAMESPACE = '';
							
	END;
			
	CREATE FUNCTION TransformBase64String() RETURNS CHARACTER
	BEGIN
		DECLARE base64String CHARACTER;
		SET base64String = InputRoot.XMLNSC.msg:Message.msg:MessageHeader.hd:Security.ds:Signature.ds:Digest;
		RETURN TransformBase64(base64String);			
	END;
	
	CREATE FUNCTION TransformBase64(IN base64String CHARACTER) 
	RETURNS CHARACTER
	LANGUAGE JAVA
	EXTERNAL NAME "utilities.FromBase64Transformer.transform";
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
